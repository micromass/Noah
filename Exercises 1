1) Write a function that computes the factorial of a nonnegative integers
2) Write a function that computes binomial coefficients
3) Write a function that computing the square root of a floating number
4) Write a function that checks a number for primality
5) a) Write a function that takes as input a list of numbers and outputs the average of this list
b) Functions can be passed as arguments to functions too! Use this to write a function that takes as input a list and an operation, and computes the operation on every input on the list:
For example [1,2,3] ---> [f(1), f(2), f(3)]
Notes:
a) The functions must be robust. For example, if we try to compute the factorial of 0.5, it should give an error.
b) Try to think about efficiency, for example, the definition of something might not be the most efficient way to 
program the function (for example the binomial coefficients in (2)).


6) Represent a complex number by [a,b]. Make functions to compute Real part, Imaginary part, product,
sum, inverse, difference, polar forms of complex numbers.


CLASSES:
In Exercise 6, we have seen how to deal with complex numbers. However, there is a much more useful interpretation of complex
numbers than just [a,b]. This is where a class comes in. Let's build a very simple class

class complex(object)
    Re = 0
    Im = 0
    
This is a very simple complex numbers class. To define a complex number, just type 
c = complex()

Then to access/change the complex number values, just do
c.Re = 1
c.Im = 2
to obtain 1+2i

Now, it is much more handy to define 1+2i as
c = complex(1,2)
this is where the _init_ comes in:

class complex(object):
    def __init__(self,a,b):
        self.Re = a
        self.Im = b
        
Now we can do this. For example
c = complex(1,2)
c.Re
c.Im

If we just type 
c
it gives a very ugly output, better to get as output 1+2i. This is where __repr__ comes in. Note that __repr__ 
MUST output a string.

class complex(object):
    def __init__(self,a,b):
        self.Re = a
        self.Im = b
    def __repr__(self):
        return str(self.Re) + "+" + str(self.Im) + "i"
        
complex(1,2)

However, type:
complex(1,-2)
Fix this by adjusting __repr__

It would be nice to add complex numbers as follows:
c = complex(1,2)
d = complex(3,4)
c+d

this is possible:
class complex(object):
    def __init__(self,a,b):
        self.Re = a
        self.Im = b
    def __repr__(self):
        return str(self.Re) + "+" + str(self.Im) + "i"
    def __add__(self,other):
        return complex(self.Re + other.Re, self.Im + other.Im)

Try it!
However, we should only be able to add complex numbers, otherwise we should get an error. We modify it as follows with 
the isinstance operator. This operator checks whether the inputs are of the right type:

class complex(object):
    def __init__(self,a,b):
        if not isinstance(a,float):
             raise TypeError('Input should be real numbers')
        if not isinstance(b,float):
             raise TypeError('Input should be real numbers')
        self.Re = a
        self.Im = b
    def __repr__(self):
        return str(self.Re) + "+" + str(self.Im) + "i"
    def __add__(self,other):
        if isinstance(other, complex)
            return complex(self.Re + other.Re, self.Im + other.Im)           
        else:    
            raise TypeError('Can only add two complex numbers')
        return complex(self.Re + other.Re, self.Im + other.Im)

Of course, something like
complex(1,2) + 1
should really be ok, so let's modify further:

class complex(object):
    def __init__(self,a,b):
        if not isinstance(a,float):
             raise TypeError('Input should be real numbers')
        if not isinstance(b,float):
             raise TypeError('Input should be real numbers')
        self.Re = a
        self.Im = b
    def __repr__(self):
        return str(self.Re) + "+" + str(self.Im) + "i"
    def __add__(self,other):
        if isinstance(other, complex)
            return complex(self.Re + other.Re, self.Im + other.Im) 
        elif isinstance(other, float)
            return complex(self.Re + other, self.Im)
        else:    
            raise TypeError('Can only add two complex numbers')

But now something like this is not defined:
1 + complex(1,2)
This is because + looks at the class of the first argument (which is an int) and takes only the __add__ of the first argument!
We want to take the addition of the second argument. No problem, this is what __radd__ does:

class complex(object):
    def __init__(self,a,b):
        if not isinstance(a,float):
             raise TypeError('Input should be real numbers')
        if not isinstance(b,float):
             raise TypeError('Input should be real numbers')
        self.Re = a
        self.Im = b
    def __repr__(self):
        return str(self.Re) + "+" + str(self.Im) + "i"
    def __add__(self,other):
        if isinstance(other, complex)
            return complex(self.Re + other.Re, self.Im + other.Im) 
        elif isinstance(other, float)
            return complex(self.Re + other, self.Im)
        else:    
            raise TypeError('Can only add two complex numbers')
     def __radd__(self,other):
         other + self
 
 This is all you should know about classes now. As an exercise, extend this class further so it can handle other operations.
 The name of the possible operations can be found here: https://docs.python.org/3/reference/datamodel.html
 or here: http://thepythonguru.com/python-operator-overloading/

 

7) Make a class representing the rational numbers.

8) Define a natural number as a list of strings between '0' and '9'
For example, the natural number 100 would be the list ['1', '0', '0']
Make a class of natural numbers and find an efficient way to compute the sum, difference, product and powers of natural numbers.
Compare your algorithm with the actual computation of numbers in python by comparing the system time.

9) For set theory lovers:
a) Make a class that represents finite sets. Implement set operations like union, intersection, set difference, power set, comprehension, etc.
b) Define natural numbers the set theoretic way and define the operations on them.
c) Define functions and relations the set theoretic way. Try other set theory definitions from Hrbacek.
d) Using either the natural numbers from 8 or 9, model the integers.

10) Read about the Stirling approximation of the factorial function. Write a function comparing the Stirling approximation, 
and compare with Ex 1. Compare both accuracy of the approximation as running time.

11) Compute the Fibonacci numbers in two ways:
a) Using the definition
b) Using the explicit Binet formula
Compare accuracy and running time.

12)
a) Compute and integration function that takes a real-valued function and computes the integral of the function between 0 and 1.
b) Use this function (or a generalization) to compute logarithms with arbitrary base (do NOT use the math package of course)

13) 
a) Compute a function that takes as input a list of numbers and orders it.
b) Generalize this function by letting it take as input an ordering relation too, that is a function that compares two numbers.
c) Generalize the function even further by allowing the inputs of the list to not only be numbers but arbitrary objects, which can be compared using the ordering relation.

14) 
a) Compute the following functions: log(x), sin(x), cos(x), exp(x), tan(x), cotan(x), sec(x), cosec(x) with power series
c) Generalize sin(x), cos(x), exp(x), tan(x), sec(x), cosec(x) to complex numbers
d) Compute logarithm and powers of complex numbers. Use your program to find out i^i is a real number.
e) Compute ALL the nth roots of a complex number where n is a positive integer.
f) What happens to algorithm in exercise 3 if you let it work on a complex number?

15) 
a) Read Chapter 4 of Acheson "from calculus to chaos". Use the three methods there to compute exp(x). 
b) Solve the exercises from that chapter with python.
c) Google the Predator-Prey equation and model it using the techniques you've learned.
d) Model the spread of an epidemic, using https://motherboard.vice.com/en_us/article/nzed5k/how-subtle-differences-in-a-population-can-lead-to-horrific-epidemics
Try to model some infectuous diseases and less infectuous disease.
Try to mimick the act of "isolating" patients.
Try to mimick the act of vaccinating a certain percentage of the population. Relate this with the concept of "herd immunity".

16) DIFFICULT: compute a function that takes as input a real valued function, and outputs
its derivative in 0 (or more generally: a different number). That is, given as input f, the output must be f'(0).

17) Dynamical systems: This exercises series deals with a very interesting function: f(x) = kx(1-x). It is just a quadratic function, so
you'd think everything is easy. But this is not the case.
Indeed, consider the following recursion: x_(n+1) = k x_n (1-x_n), and x_0 = some starting value.
This can be interpreted as some population dynamics where n is the time, and x_n is the population in millions.
For example, if x_n = 0.2 then the population is 200,000, but then x_(n+1) = 0.2*0.8=0.16 is 160,000 people (if k=1).
We will investigate the long term dynamics of this system.
a) Start by taking k=1/2. Take various starting values x_0. What are the possible long term dynamics of the system? Can you tell for which starting value 
we get which long term behavior?
b) Do the same for k=2, does anything change?
c) Do the same for k=3.2, does anything change?
d) Do the same for k=3.6, does anything change?
e) Do the same for k=5, does anything change?
f) Do the same for k=4 (by far the most interesting value), what happens?
g) Finally, make a bifurcation diagram of the long term behavior, this is a diagram with as X-axis the value k, running from 0 to 5. And 
on the Y-axis (focused between 0 and 1) the long term behavior of the recursion.
Do this as follows:
1) Choose a value k between 0 and 5 (the idea is to do these steps for "all" values of k between 0 and 5)
2) Choose a value x_0 at random in [0,1]
3) Calculate 150 values with the recursion: x_0, ...., x_150
4) Ignore the "burn-in" part x0, ..., x100
5) Plot (k,x101), ..., (k,x150).
You will get a very interesting result. How do you interpet it.
If you are interested in this resulting image, investigate it further: zoom in more deeply, etc

18) This is similar to 17, but now deals with the recursion z_(n+1) = z_n^2 + c and z0 = 0. The question is whether for a given c, this
recursion remains bounded, or flies off to infinity. (for complex numbers, bounded means that |z_n| remains bounded).
a) What happens if c=0? c=1? c=-1? c=i? c=-i?  (Hint: for programming purposes, you can accept  the following fact: the sequence |z_n|
flies off to infinity iff there is some point n such that |z_n|>2).
b) Try to make a plot with as X-axis the values between -2 and 1, and as Y-axis the values between i and -i. For "every" point on this 
plot, find out whether the sequence remains bounded, or explodes to infinity. Plot the points for which it remains bounded black. Don't
plot the points for which the sequence explodes. What is the resulting image?
c) Try to give an estimation of the surface area of the figure you obtained in (b). Note: an exact solution to the surface area
is still an unsolved problem!!


19) (Requires probability knowledge, or at least the motivation to learn some basic probability)
Run the following code:
import random

def Randomize():
    p = random.randint(1,1000)
    def Aux():
       out = random.randint(1,1000)
       if out < p:
           return 0
       else:
           return 1
    return Aux

Coin = Randomize()

In the following exercises, you may make use of the function Dice(). But you may not use the random package in any other way.
The function Dice() returns 0 and 1 at random. However, the true probability of 0 or 1 is hidden from the user. So it could return
0 and 1 at a 50/50 rate. Or it could return 1 four times more often than zero.
a) Simulate a fair coin: a function that takes on the values 0 and 1 with 50/50 probability.
b) Simulate a Bernouilli(p) distribution for a given p in [0,1]
b) Simulate a binomial distribution, a poisson distribution, a geometric distribution and a hypergeometric distribution.
c) Simulate a uniform distribution, a normal distribution, an exponential distribution.
d) For any of the distributions you have just covered, do the following:
1) Generate n values from the distribution (where n goes from 0 to 100)
2) Compute the mean value
3) Make a plot for this value wrt n. What do you see?
e) For any of the distributions you have just covered, do the following
1) Generate 100 values from the distribution.
2) Compute the mean value from the values in (1)
3) Save this value in an array I call A
4) Do steps 1-3 a 100 times, so that in the end A contains 100 values.
5) plot a histogram of the resulting array. What do you see? Is the resulting shape dependent on the original distribution? In what way?

20) Vector spaces: 
a) Build a class that mimicks the vector space RxR. So it must have addition and scalar multiplication.

Now, once you did this, you can also write one for RxRxR or RxRxRxR, or so on. But do we really need to write them 
all separately?
No, we can write a function that outputs the necessary class.
So we will write a function Tuple, such that if we set
V = Tuple(3)
then we can define a tuple as 
V([1,2,3])

How do we do this:
def Tuple(n):
   class aux(object):
       ALL THE NECESSARY INPUTS
   
   output aux

b) complete this


What about CxC or CxCxC? We can modify tuple to take as input the ground field. For example
Tuple(n,complex)
Tuple(n,float)
Tuple(n,int)

c) Do this!



21) Finding the Hubble constant:
The following are data on distances and velocities of 24 galaxies containing Cepheid stars, from the Hubble space telescope key project 
to measure the Hubble constant.

X_1,...X_24: Galaxy distance in mega parsecs (1 parsec is 3.09*10^13 km):
2.00  9.16 16.14 17.95 21.88  3.22 11.22 11.75  3.63 13.80 10.00 10.52  6.64 15.21 17.70 14.86 16.22 15.78 14.93 21.98 12.36  4.49  3.15 14.72

Y_1,...,Y_24: Galaxy's relative velocity in km/s:
133  664 1794 1594 1473  278  714  882   80  772  642  768  609 1433  619 1424 1384 1444 1423 1403 1103  318  232  999

A) plot these points on an X-Y frame. Is there a linear relationship between X and Y.
B) Estimate the best fitting line Y=aX + b as follows:
B1) Determine theoretically a formula for a and b by minimizing the following function of a and b:
(a,b) ----> (Y_1 - aX_1 - b)^2 + ... + (Y_24 - aX_24 - b)^2
Do this by derivatives
B2) Compute the values for a and b using a computer.
B3) The estimate for a you have obtained in in units km/(s*Megaparsec). Find the value of the constant in 1/s, this is the hubble constant k.
B4) 1/k is the age of the universe. Compute this and compare with the current accepted value.

22) Compute the value of e using two methods:
A) The power series of e^x
B) The limit of (1 + 1/n)^n. Which one is faster?

23) 
A) What formulas do you know that approximate pi? Try them
B) Prove that (5+i)^4 * (239 -i) = 4 * 13^4 * (1+i)
C) Convert this to polar to prove the formula pi/4 = 4*arctan(1/5) - arctan(1/239)
D) From the formula in C, compute pi using the power series of arctan. Which algorithm is faster?

24) Try to compute sine(x) using the following methods:
1) As outlined in the first chapters of the book "Heavenly mathematics" of Van Bummelen, starting page 7 (the historical method)
2) Using the Taylor series of sine.
3) Using CORDIC (see wikipedia). Which algorithm is faster?

25) Try to compute log(x) using the following methods:
1) Using the Taylor series (watch out, this one does not converge everywhere)
2) By computing the integral of 1/x
3) The historical method as outlined by Hairer Wanner, "Analysis by its history", starting page 30. Which algorithm is faster?

26)
A) According to theory, the series SUM 1/n diverges to infinity. Test this: how many sums do you need to take in order for the summation to 
be larger than 10?
B) According to theory, the series SUM (-1)^n /n is conditionally convergent. Test this: take many terms and compute the sum of the series.
Then reorder the series in a nontrivial way and compute the sum again. Do you get different values?



